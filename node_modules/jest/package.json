{
  "name": "jest",
  "description": "JavaScriptational State Transfer. JS restful API layer with Mongoose based resources. Inspired by python Tastypie",
  "version": "0.1.37",
  "author": {
    "name": "Ishai Jaffe",
    "email": "ishai@empeeric.com"
  },
  "contributors": [
    {
      "name": "Alon Valadji",
      "email": "alon@empeeric.com"
    },
    {
      "name": "Refael Ackermann",
      "email": "refael@empeeric.com"
    }
  ],
  "dependencies": {
    "underscore": "",
    "sji": ""
  },
  "devDependencies": {
    "express": "",
    "mongoose": "",
    "api-easy": ""
  },
  "main": "index",
  "keywords": [
    "api",
    "mongoose",
    "rest",
    "restful",
    "resource"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:Empeeric/jest.git"
  },
  "engines": {
    "node": ">= 0.4.1"
  },
  "readme": "Jest\r\n====\r\n\r\n> JavaScriptational State Transfer for node.js with easy generating resource from Mongoose ORM\r\n\r\n####  #\r\n\r\nintroduction\r\n------------\r\nThis module provides Resource base class with:\r\n\r\n- Authentication\r\n- Authorization\r\n- Pagination\r\n- Cache\r\n- Throttling\r\n- Validation\r\n- MongooseResource\r\n- Resources listing\r\n\r\nsynopsis\r\n--------\r\n```js\r\nvar express = require('express'),\r\n    app = express(),\r\n    Jest = require('jest'),\r\n    mongoose = require('mongoose'),\r\n    Schema = mongoose.Schema;\r\n\r\nmongoose.connect('mongodb://localhost/app');\r\n\r\napp.configure(function () {\r\n    app.set('port', process.env.PORT || 80);\r\n    app.use(express.logger('dev'));\r\n    app.use(express.bodyParser());\r\n    app.use(express.methodOverride());\r\n    app.use(app.router);\r\n});\r\n```\r\n\r\n// create mongoose model\r\n\r\n```js\r\nvar User = mongoose.model('user', new Schema({\r\n    username: {type: String, required: true},\r\n    email: String,\r\n    password: {type: String, validate: [function(v) { return true}, 'custom validate']},\r\n    credits: {type: Number, min: 1, max: 230},\r\n    role: {type: String, 'default': 'user' ,enum: ['user', 'admin']},\r\n    date: {type:Date, 'default': Date.now},\r\n    groups: [{name:String, permissions: [{name:String, expires:Date}]}]\r\n}));\r\n```\r\n\r\n// create mongoose resource for User model\r\n\r\n```js\r\nvar UserResource = Jest.MongooseResource.extend({\r\n    init: function(){\r\n        // call Jest.Resource constructor\r\n        // passing the Model User we created\r\n        this._super(User);\r\n\r\n        // use array to decide which fields will be visible by API\r\n        // this.fields = ['username','credits'];\r\n        // use tree object to decide recursively which fields to expose\r\n        this.fields = {username: true, credits: true, groups: {name: true, permissions: {name: true} }};\r\n\r\n        // use list or\r\n        this.update_fields = ['email', 'password'];\r\n\r\n        // specify base query for the model\r\n        this.default_query = function(query){\r\n            return query.where('credits').gte(10);\r\n        };\r\n\r\n        // specify which fields can be used to filter\r\n        this.filtering = {credits: true};\r\n\r\n        // which http methods are allowed\r\n        this.allowed_methods = ['get', 'post', 'put'];\r\n    }\r\n})\r\n\r\nvar api = new Jest.Api('api', app);\r\n\r\napi.register('users', new UserResource());\r\n\r\napp.listen(app.get('port'), function(){\r\n    console.log('express started on port %d', app.get('port'));\r\n})\r\n```\r\n\r\nnow go to `http://localhost/api/` to see the api's and `http://localhost/api/users`\r\nto work with User model the Jest way.\r\n\r\n\r\ninstallation\r\n------------\r\n\r\n    $ npm install jest\r\n\r\ndocumentation\r\n-------------\r\n\r\nThere is none.\r\nBut there is an example, and a test.\r\n\r\nAnd maybe one day will be...\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Empeeric/jest/issues"
  },
  "homepage": "https://github.com/Empeeric/jest",
  "_id": "jest@0.1.37",
  "_shasum": "0de27df1c7afc3fc208e4c2201f57d8efa1bcff6",
  "_from": "jest@*",
  "_resolved": "https://registry.npmjs.org/jest/-/jest-0.1.37.tgz"
}
